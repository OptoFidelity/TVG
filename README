This is the source code distribution of OptoFidelity Test Video Generator.
Use it only if you want to compile TVG yourself - there are binary distributions
available at https://github.com/OptoFidelity/TVG/releases

--

Compiling (for Windows 64-bit target, on 64-bit Linux host):

1. Checkout newest cerbero from Git repo.
   Note: do not place it directly in ~, because ~/cerbero will be used for
         temp files during build.
   
   mkdir ~/dev; cd ~/dev
   git clone https://github.com/OptoFidelity/cerbero.git
   # (You can also use upstream git://anongit.freedesktop.org/gstreamer/sdk/cerbero)
   cd cerbero

2. Bootstrap and build gstreamer:
   ./cerbero-uninstalled -c config/cross-win64.cbc bootstrap
   ./cerbero-uninstalled -c config/cross-win64.cbc package gstreamer-1.0
   Errors about WiX in packaging stage can be ignored, as we do not use the MSI
   packages.

3. Checkout the oftvg repo.

4. Build oftvg using the included config file
   ./cerbero-uninstalled -c ~/oftvg/cerbero/cross-win64.cbc build oftvg 

5. Run the packaging script:
   distribution/make_windows_pkg.sh ~/cerbero/dist/windows_x86_64

--

Compiling (for Linux 64-bit target, on 64-bit Linux host):

1. Checkout newest cerbero from Git repo.
   Note: do not place it directly in ~, because ~/cerbero will be used for
         temp files during build.
   
   mkdir ~/dev; cd ~/dev
   git clone https://github.com/OptoFidelity/cerbero.git
   # (You can also use upstream git://anongit.freedesktop.org/gstreamer/sdk/cerbero)
   cd cerbero

2. Bootstrap and build gstreamer:
   ./cerbero-uninstalled -c config/linux.config bootstrap
   ./cerbero-uninstalled -c config/linux.config package gstreamer-1.0

3. Checkout the oftvg repo.

4. Build oftvg using the included config file
   ./cerbero-uninstalled -c ~/oftvg/cerbero/linux.config build oftvg 

5. Run the packaging script:
   distribution/make_linux_pkg.sh ~/cerbero/dist/linux_x86_64

Note that the distribution version you use to build will determine the minimum
system requirements for the built package. For example, it will not run with
an older version of glibc.

--

Debugging

The files in the distribution package have been stripped of debug symbols
in order to reduce the size of the package. The original versions are
stored in a separate package:

1. Obtain the tvg-1.xxxxxx-xxxxx-debug.zip from the build machine.

2. Extract the binaries and libraries over the stripped versions.
   E.g. tvg...debug/libgstoftvg.dll overwrites tvg/gstreamer/lib/libgstoftvg.dll

3. Obtain gdb for your platform. E.g. mingw64 x86_64 gdb for Windows.

4. Getting the command line arguments from within Run_TVG.bat requires
   a small trick. Replace this multi-line block:
      gst-launch-1.0 -q ^ ......... ^ ...... ^ ....
   with:
      echo set args -q ^ ....... ^ ...... ^ .... > args.txt
   and add after it:
      C:\mingw64\bin\gdb -x args.txt gst-launch-1.0

   Run the Run_TVG.bat and when you get into gdb, type "run" and it will
   apply the arguments automatically.

6. If GDB does not find the source code, use "directory" command to give path:
      directory ..\..\TVG\GstOFTVG

--

Running the tests:

1. Go to the 'tests' folder.

2. Execute run_all_tests.py with the path to the extracted binary package:
python2 run_all_tests.py ../tvg-1.0beta4-linux-x64/

3. The last line will read "All tests ok" if the tests were successful.

